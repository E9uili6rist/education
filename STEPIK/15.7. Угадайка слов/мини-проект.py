import random

spisok = ['попыткап', 'агалава', 'применение', 'требование', 'страна', 'глава']



# ['жизнь', 'день', 'рука', 'работа', 'место',  'день', 'рука', 'работа', 'место',
#     'вопрос', 'глаз', 'страна', 'друг', 'сторона', 'дом', 'случай', 'ребенок', 'голова',
#     'система', 'вид', 'конец', 'отношение', 'город', 'часть', 'женщина', 'проблема', 'земля',
#     'решение', 'власть', 'машина', 'закон', 'час', 'образ', 'отец', 'история', 'нога', 'вода',
#     'война', 'возможность', 'компания', 'результат', 'дверь', 'народ', 'область', 'число',
#     'голос', 'развитие', 'группа', 'жена', 'процесс', 'условие', 'книга', 'ночь', 'суд', 'деньга',
#     'уровень', 'начало', 'государство', 'стол', 'средство', 'связь', 'имя', 'президент', 'форма',
#     'путь', 'организация', 'качество', 'действие', 'статья', 'общество', 'ситуация', 'деятельность',
#     'школа', 'душа', 'дорога', 'язык', 'взгляд', 'момент', 'минута', 'месяц', 'порядок', 'цель',
#     'программа', 'муж', 'помощь', 'мысль', 'вечер', 'орган', 'правительство', 'рынок', 'предприятие',
#     'партия', 'роль', 'смысл', 'мама', 'мера', 'улица', 'состояние', 'задача', 'информация', 'театр',
#     'внимание', 'производство', 'квартира', 'труд', 'тело', 'письмо', 'центр', 'утро', 'мать', 'комната',
#     'семья', 'сын', 'смерть', 'положение', 'интерес', 'федерация', '
#     'вопрос', 'глаз', 'страна', 'друг', 'сторона', 'дом', 'случай', 'ребенок', 'голова',
#     'система', 'вид', 'конец', 'отношение', 'город', 'часть', 'женщина', 'проблема', 'земля',
#     'решение', 'власть', 'машина', 'закон', 'час', 'образ', 'отец', 'история', 'нога', 'вода',
#     'война', 'возможность', 'компания', 'результат', 'дверь', 'народ', 'область', 'число',
#     'голос', 'развитие', 'группа', 'жена', 'процесс', 'условие', 'книга', 'ночь', 'суд', 'деньга',
#     'уровень', 'начало', 'государство', 'стол', 'средство', 'связь', 'имя', 'президент', 'форма',
#     'путь', 'организация', 'качество', 'действие', 'статья', 'общество', 'ситуация', 'деятельность',
#     'школа', 'душа', 'дорога', 'язык', 'взгляд', 'момент', 'минута', 'месяц', 'порядок', 'цель',
#     'программа', 'муж', 'помощь', 'мысль', 'вечер', 'орган', 'правительство', 'рынок', 'предприятие',
#     'партия', 'роль', 'смысл', 'мама', 'мера', 'улица', 'состояние', 'задача', 'информация', 'театр',
#     'внимание', 'производство', 'квартира', 'труд', 'тело', 'письмо', 'центр', 'утро', 'мать', 'комната',
#     'семья', 'сын', 'смерть', 'положение', 'интерес', 'федерация', 'век', 'идея', 'управление', 'автор',
#     'окно', 'ответ', 'совет', 'разговор', 'мужчина', 'ряд', 'счет', 'мнение', 'цена', 'точка', 'план',
#     'проект', 'глава', 'материал', 'основа', 'причина', 'движение', 'культура', 'сердце', 'рубль', 'наука',
#     'документ', 'неделя', 'вещь', 'чувство', 'правило', 'служба', 'газета', 'срок', 'институт', 'ход',
#     'стена', 'директор', 'плечо', 'опыт', 'встреча', 'принцип', 'событие', 'структура', 'количество', 'товарищ',
#     'создание', 'значение', 'объект', 'гражданин', 'очередь', 'период', 'образование', 'состав', 'пример',
#     'лес', 'исследование', 'девушка', 'данные', 'палец', 'судьба', 'тип', 'метод', 'политика', 'армия', 'брат',
#     'представитель', 'борьба', 'использование', 'шаг', 'игра', 'участие', 'территория', 'край', 'размер', 'номер',
#     'район', 'население', 'банк', 'начальник', 'класс', 'зал', 'изменение', 'большинство', 'характер', 'кровь',
#     'направление', 'позиция', 'герой', 'течение', 'девочка', 'искусство', 'гость', 'воздух', 'мальчик', 'фильм',
#     'договор', 'регион', 'выбор', 'свобода', 'врач', 'экономика', 'небо', 'факт', 'церковь', 'завод', 'фирма',
#     'бизнес', 'союз', 'деньги', 'специалист', 'род', 'команда', 'руководитель', 'спина', 'дух', 'музыка',
#     'способ', 'хозяин', 'поле', 'доллар', 'память', 'природа', 'дерево', 'оценка', 'объем', 'картина',
#     'процент', 'требование', 'писатель', 'сцена', 'анализ', 'основание', 'повод', 'вариант', 'берег',
#     'модель', 'степень', 'самолет', 'телефон', 'граница', 'песня', 'половина', 'министр', 'угол', 'зрение',
#     'предмет', 'литература', 'операция', 'двор', 'спектакль', 'руководство', 'солнце', 'автомобиль', 'родитель',
#     'участник', 'журнал', 'база', 'пространство', 'защита', 'название', 'стих', 'море', 'удар', 'знание',
#     'солдат', 'миллион', 'строительство', 'технология', 'председатель', 'сон', 'сознание', 'бумага', 'реформа',
#     'оружие', 'линия', 'текст', 'выход', 'ребята', 'магазин', 'соответствие', 'участок', 'услуга', 'поэт',
#     'предложение', 'желание', 'пара', 'успех', 'среда', 'возраст', 'комплекс', 'бюджет', 'представление',
#     'площадь', 'генерал', 'господин', 'дочь', 'понятие', 'кабинет', 'безопасность', 'фонд', 'сфера', 'папа',
#     'сотрудник', 'продукция', 'будущее', 'продукт', 'содержание', 'художник', 'республика', 'сумма', 'контроль',
#     'парень', 'ветер', 'хозяйство', 'помочь', 'курс', 'губа', 'река', 'грудь', 'огонь', 'нос', 'волос', 'ухо',
#     'отсутствие', 'радость', 'сад', 'подготовка', 'необходимость', 'доктор', 'лето', 'камень', 'здание',
#     'капитан', 'собака', 'итог', 'рис', 'техника', 'элемент', 'источник', 'деревня', 'депутат', 'проведение',
#     'рот', 'масса', 'комиссия', 'цвет', 'рассказ', 'функция', 'определение', 'мужик', 'обеспечение',
#     'обстоятельство', 'работник', 'разработка', 'лист', 'звезда', 'гора', 'применение', 'победа', 'товар',
#     'воля', 'зона', 'предел', 'целое', 'личность', 'офицер', 'влияние', 'поддержка', 'ответственность']

rus_dic = 'АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ'

def get_word(spisok):
    word = random.choice(spisok).upper()
    return word

def display_hangman(tries, lvl, win):
    stages = [ #0
                '''
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |     / \\
                   -
                ''',
                #1
                '''
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |     / 
                   -
                ''',
                #2
                '''
                   --------
                   |      |
                   |      O
                   |     \\|/
                   |      |
                   |      
                   -
                ''',
                #3
                '''
                   --------
                   |      |
                   |      O
                   |     \\|
                   |      |
                   |     
                   -
                ''',
                #4
                '''
                   --------
                   |      |
                   |      O
                   |      |
                   |      |
                   |     
                   -
                ''',
                #5
                '''
                   --------
                   |      |
                   |      O
                   |    
                   |      
                   |     
                   -
                ''',
                #6
                '''
                   --------
                   |      |
                   |      
                   |    
                   |      
                   |     
                   -
                ''' ]

    stages_long = ['''
                        ________
                        |      |
                        |     \\O/
                        |      |
                        |    _/ \\_
                        |
                        -''',
                   '''
                   ________
                   |      |
                   |     \\O/
                   |      |
                   |    _/ \\
                   |
                   -''',
                   '''
                   ________
                   |      |
                   |     \\O/
                   |      |
                   |     / \\
                   |
                   -''',
                   '''
                   ________
                   |      |
                   |     \\O/
                   |      |
                   |     / 
                   |
                   -''',
                   '''
                   ________
                   |      |
                   |     \\O/
                   |      |
                   |
                   |
                   -''',
                   '''
                   ________
                   |      |
                   |     \\O
                   |      |
                   |
                   |
                   -''',
                   '''
                   ________
                   |      |
                   |      O
                   |      |
                   |
                   |
                   -''',
                   '''
                   ________
                   |      |
                   |      O
                   |      
                   |
                   |
                   -''',
                   '''
                   ________
                   |      |
                   |
                   |
                   |
                   |
                   -''']

    stages_very_long = ['''
                        ________
                        |      |
                        |     \\O/
                        |      |
                        |    _/ \\_
                        |
                        -''',
                        '''
                        ________
                        |      |
                        |     \\O/
                        |      |
                        |    _/ \\
                        |
                        -''',
                        '''
                        ________
                        |      |
                        |     \\O/
                        |      |
                        |     / \\
                        |
                        -''',
                        '''
                        ________
                        |      |
                        |     \\O/
                        |      |
                        |     / 
                        |
                        -''',
                        '''
                        ________
                        |      |
                        |     \\O/
                        |      |
                        |
                        |
                        -''',
                        '''
                        ________
                        |      |
                        |     \\O
                        |      |
                        |
                        |
                        -''',
                        '''
                        ________
                        |      |
                        |      O
                        |      |
                        |
                        |
                        -''',
                        '''
                        ________
                        |      |
                        |      O
                        |      
                        |
                        |
                        -''',
                        '''
                        ________
                        |      |
                        |
                        |
                        |
                        |
                        -''',
                        '''
                        ________
                        |      
                        |
                        |
                        |
                        |
                        -''',
                        '''

                        |      
                        |
                        |
                        |
                        |
                        -''']

    stage_win = ''' 
              O
             \\|/
              |
             / \\
             '''
    if win == True:
        return stage_win
    if lvl == 1:
        return stages[tries]
    elif lvl == 2:
        return stages_long[tries]
    elif lvl == 3:
        return stages_very_long[tries]



def play(word):               #когда было help не работало

    win = False
    flag_get_help = False
    flag_grammar = False
    flag_first_last = False
    guessed_letters = []  # список уже названных букв
    guessed_words = []  # список уже названных слов
    word_completion = '_' * len(word)

    print('Добро пожаловать на виселицу!')

    print('Выберите уровень сложности: (1 - hard, 2 - medium, 3 - easy)')
    lvl = int(input())
    if lvl == 1:
        tries = 6
    if lvl == 2:
        tries = 8
    if lvl == 3:
        tries = 10
    tries_2 = tries

    print('Отгадай слово чтобы спасти человечка. Введи предполагаемую букву или всё слово целиком. У тебя', tries, 'попыток. :)')
    print(display_hangman(tries, lvl, win))
    print(word_completion)
    #print(word)     # ДЛЯ ТЕСТОВ!

    print('Можем сыграть с подсказками. Открыть первую и последнюю буквы слова? (да/нет)')
    if help() == True:
        flag_first_last = True
        word_completion = word[0] + (len(word) - 2) * '_' + word[-1]
        print(word_completion)
        guessed_letters.append(word[0])
        guessed_letters.append(word[-1])   # нужно прописать, чтобы если буква повторяется в середине, ее пропускали, сложно, степик написать
    else:
        print('Поехали!')

    while True:
        vvod = input().upper()

        if vvod in guessed_words:
            print('Уже называли, попробуйте ещё раз.')
            continue

        if vvod in guessed_letters:
            if flag_first_last == False:
                print('Уже называли, попробуйте ещё раз.')

            if vvod in word[1:-1] and flag_first_last == True:
                print('Отгадал, есть ещё одна такая буква!')
                s = list(word_completion)
                index = [i for i in range(len(word)) if word[i] == vvod]
                for i in index:
                    s[i] = vvod
                word_completion = ''.join(s)
                print(word_completion)
                flag_first_last = False

        if len(vvod) == 1 and vvod not in rus_dic:
            print('Необходимо ввести букву на русском языке, попробуй ещё раз.')

        if len(vvod) == 1 and vvod in word and vvod not in guessed_letters:
            guessed_letters.append(vvod)
            print('Верно, такая буква есть!')
            s = list(word_completion)
            index = [i for i in range(len(word)) if word[i] == vvod]
            for i in index:
                s[i] = vvod
            word_completion = ''.join(s)
            print(word_completion)

        if len(vvod) == 1 and vvod not in word and vvod in rus_dic:
            guessed_letters.append(vvod)
            tries -= 1
            print('Такой буквы нет. количество попыток:', tries)
            print(display_hangman(tries, lvl, win))

        if len(vvod) > 1:
            for i in vvod:
                if i in rus_dic:
                    flag_grammar = False
                else:
                    flag_grammar = True
                    print('Необходимо ввести слово на русском языке, попробуй ещё раз.')
                    break
            if vvod != word and flag_grammar == False:
                guessed_words.append(vvod)
                tries -= 1
                print('Пока неверно. количество попыток:', tries)
                print(display_hangman(tries, lvl, win))
            if vvod == word:
                print('Поздравляем, вы угадали слово! Человечек спасён! :)')
                win = True
                print(display_hangman(tries, lvl, win))
                break

        if tries == 0:
            print('Вы проиграли. Правильный ответ был:', word.upper())
            print(display_hangman(tries, lvl, win))
            break

        if word_completion == word:
            print('Поздравляем, вы угадали слово! Человечек спасён! :)')
            win = True
            print(display_hangman(tries, lvl, win))
            break

        if tries <= int(tries_2 / 2) and flag_get_help == False:
            if word[0] not in guessed_letters and word[-1] not in guessed_letters:   # как сократить??
                print('Может все-таки открыть первую и последнюю буквы слова? :)')
                if help() == True:
                    flag_first_last = True
                    s = list(word_completion)
                    s[0] = word[0]
                    s[-1] = word[-1]
                    word_completion = ''.join(s)
                    guessed_letters.append(word[0])
                    guessed_letters.append(word[-1])
                    print(word_completion)
                    flag_get_help = True
                else:
                    continue
                    flag_get_help = True
            if word[0] not in guessed_letters:
                print('Может открыть первую букву слова? :)')
                if help() == True:
                    flag_first_last = True
                    s = list(word_completion)
                    s[0] = word[0]
                    word_completion = ''.join(s)
                    guessed_letters.append(word[0])
                    print(word_completion)
                    flag_get_help = True
                else:
                    continue
                    flag_get_help = True
            if word[-1] not in guessed_letters:
                print('Может открыть последнюю букву слова? :)')
                if help() == True:
                    flag_first_last = True
                    s = list(word_completion)
                    s[-1] = word[-1]
                    word_completion = ''.join(s)
                    guessed_letters.append(word[-1])
                    print(word_completion)
                    flag_get_help = True
                else:
                    continue
                    flag_get_help = True


def help():
    while True:
        answer = input()
        if answer.isalpha() and answer == 'да':
            return True
        elif answer.isalpha() and answer == 'нет':
            break
        else:
            print('Не понимаю. Введите ответ ещё раз (да/нет).')


def play_again():
    print('Сыграем еще раз? (да/нет)')
    while True:
        answer = input()
        if answer.isalpha() and answer == 'да':
            return True
            break
        elif answer.isalpha() and answer == 'нет':
            return False
            break
        else:
            print('Не понимаю. Введите ответ ещё раз (да/нет).')


while True:
    play(get_word(spisok))
    if play_again() == True:
        continue
    else:
        print('Спасибо за игру. Еще увидимся!')
        break


